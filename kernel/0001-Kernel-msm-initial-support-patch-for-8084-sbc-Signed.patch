From c5aa2778ed6e617ece799e2d28471d8bc68472b4 Mon Sep 17 00:00:00 2001
From: Baji Patthan <bpatth@codeaurora.org>
Date: Fri, 2 May 2014 10:21:39 -0700
Subject: [PATCH 1/2] Kernel:msm: initial support patch for 8084 sbc
 Signed-off-by: Baji Patthan <bpatth@codeaurora.org>

Change-Id: I5ef617a84213a5bb9dfe0dd104c759fc9eec5d0f
---
 .../devicetree/bindings/leds/leds-qpnp.txt         |   28 +++
 Documentation/devicetree/bindings/usb/msm-phy.txt  |    3 +
 .../boot/dts/qcom/apq8084-camera-sensor-sbc.dtsi   |    4 +-
 arch/arm/boot/dts/qcom/apq8084-pm.dtsi             |    8 +-
 arch/arm/boot/dts/qcom/apq8084-sbc.dtsi            |   38 ++--
 arch/arm/boot/dts/qcom/apq8084.dtsi                |    1 +
 arch/arm/configs/apq8084-perf_defconfig            |    2 +
 drivers/leds/leds-qpnp.c                           |  181 ++++++++++++++++++++
 .../msm/camera_v2/sensor/io/msm_camera_io_util.c   |    5 +
 drivers/usb/dwc3/dwc3-msm.c                        |    1 +
 drivers/usb/phy/phy-msm-hsusb.c                    |  174 +++++++++++--------
 drivers/video/msm/mdss/dsi_host_v2.c               |   17 ++
 drivers/video/msm/mdss/mdss_dsi.c                  |   17 ++
 drivers/video/msm/mdss/mdss_edp.c                  |   17 ++
 drivers/video/msm/mdss/mdss_hdmi_tx.c              |   34 +++-
 drivers/video/msm/mdss/mdss_wb.c                   |   21 ++-
 16 files changed, 460 insertions(+), 91 deletions(-)

diff --git a/Documentation/devicetree/bindings/leds/leds-qpnp.txt b/Documentation/devicetree/bindings/leds/leds-qpnp.txt
index 2e7ba97..2d60440 100644
--- a/Documentation/devicetree/bindings/leds/leds-qpnp.txt
+++ b/Documentation/devicetree/bindings/leds/leds-qpnp.txt
@@ -134,6 +134,16 @@ Optional properties for LPG mode only:
 - qcom,ramp-step-ms: step between each cycle (ms)
 - qcom,lut-flags: flags to be used in lut configuration
 
+GPIO LED is an LED controlled through a PMIC GPIO.
+
+Optional properties for GPIO LED:
+- linux,default-trigger: trigger the led from external modules such as charging
+- qcom,default-state: default state of the led, should be "on" or "off"
+- qcom,turn-off-delay-ms: delay in millisecond for turning off the led when its default-state is "on". Value is being ignored in case default-state is "off".
+- qcom,source-sel: select power source, default 1 (enabled)
+- qcom,mode-ctrl: select operation mode, default 0x60 = Mode Sink
+- qcom,vin-ctrl: select input source, supported values are 0 to 7
+
 Example:
 
 	qcom,leds@a100 {
@@ -316,3 +326,21 @@ Example:
 		};
 
 	};
+
+	qcom,leds@c900 {
+		compatible = "qcom,leds-qpnp";
+		reg = <0xc900 0x100>;
+		status = "okay";
+		qcom,led_gpio_10 {
+			label = "gpio";
+			linux,name = "led:notification";
+			qcom,max-current = <40>;
+			qcom,id = <8>;
+			linux,default-trigger = "notification";
+			qcom,default-state = "on";
+			qcom,turn-off-delay-ms = <1000>;
+			qcom,source-sel = <1>;
+			qcom,mode-ctrl = <0x10>;
+			qcom,vin-ctrl = <0x02>;
+		};
+	};
diff --git a/Documentation/devicetree/bindings/usb/msm-phy.txt b/Documentation/devicetree/bindings/usb/msm-phy.txt
index 42b7c94..bf7a67a 100644
--- a/Documentation/devicetree/bindings/usb/msm-phy.txt
+++ b/Documentation/devicetree/bindings/usb/msm-phy.txt
@@ -32,6 +32,8 @@ Optional properties:
  - qcom,primary-phy: If present, indicates this is a secondary PHY and is
    dependent on the primary PHY referenced by this phandle.
  - qcom,set-pllbtune: If present, PLL tune is required in PHY initialization.
+ - qcom,num_ports: Indicates the number of ports that supported by the HS PHY.
+   If omitted, defaults to 1
 
 Example:
 	hsphy@f9200000 {
@@ -41,6 +43,7 @@ Example:
 		vdd-supply = <&pm8841_s2_corner>;
 		vdda18-supply = <&pm8941_l6>;
 		vdda33-supply = <&pm8941_l24>;
+		qcom,num_of_ports = <3>;
 		qcom,vdd-voltage-level = <1 5 7>;
 	};
 
diff --git a/arch/arm/boot/dts/qcom/apq8084-camera-sensor-sbc.dtsi b/arch/arm/boot/dts/qcom/apq8084-camera-sensor-sbc.dtsi
index c448844..36c5281 100644
--- a/arch/arm/boot/dts/qcom/apq8084-camera-sensor-sbc.dtsi
+++ b/arch/arm/boot/dts/qcom/apq8084-camera-sensor-sbc.dtsi
@@ -68,7 +68,7 @@
 		qcom,slave-id = <0x6c 0x0 0x0132>;
 		qcom,csiphy-sd-index = <2>;
 		qcom,csid-sd-index = <2>;
-		qcom,mount-angle = <270>;
+		qcom,mount-angle = <0>;
 		qcom,sensor-name = "imx132";
 		cam_vana-supply = <&pma8084_l17>;
 		cam_vdig-supply = <&pma8084_l15>;
@@ -141,7 +141,7 @@
 		reg = <0x01>;
 		qcom,csiphy-sd-index = <2>;
 		qcom,csid-sd-index = <2>;
-		qcom,mount-angle = <270>;
+		qcom,mount-angle = <0>;
 		cam_vana-supply = <&pma8084_l17>;
 		cam_vdig-supply = <&pma8084_l15>;
 		cam_vio-supply = <&pma8084_lvs3>;
diff --git a/arch/arm/boot/dts/qcom/apq8084-pm.dtsi b/arch/arm/boot/dts/qcom/apq8084-pm.dtsi
index 5a0af8b..483c1c0 100644
--- a/arch/arm/boot/dts/qcom/apq8084-pm.dtsi
+++ b/arch/arm/boot/dts/qcom/apq8084-pm.dtsi
@@ -213,9 +213,15 @@
 		qcom,gic-map = <2 216>, /* tsens_upper_lower_int */
 			<48 165>, /* usb30_hs_phy_irq */
 			<49 165>, /* usb30_hs_phy_irq */
-			<50 172>, /* usb1_hs_async_wakeup_irq */
 			<53 104>, /* mdss_irq */
 			<62 222>, /* ee0_krait_hlos_spmi_periph_irq */
+			<50 293>, /* usb30_sec_hs_phy_irq */
+			<50 293>, /* usb30_sec_hs_phy_irq */
+			<51 293>, /* usb30_sec_hs_phy_irq */
+			<52 293>, /* usb30_sec_hs_phy_irq */
+			<53 293>, /* usb30_sec_hs_phy_irq */
+			<57 293>, /* usb30_sec_hs_phy_irq */
+			<58 293>, /* usb30_sec_hs_phy_irq */
 			<0xff 33>, /* APCC_qgicL2PerfMonIrptReq */
 			<0xff 34>, /* APCC_qgicL2ErrorIrptReq */
 			<0xff 35>, /* WDT_barkInt */
diff --git a/arch/arm/boot/dts/qcom/apq8084-sbc.dtsi b/arch/arm/boot/dts/qcom/apq8084-sbc.dtsi
index 630351d..7377715 100644
--- a/arch/arm/boot/dts/qcom/apq8084-sbc.dtsi
+++ b/arch/arm/boot/dts/qcom/apq8084-sbc.dtsi
@@ -66,6 +66,20 @@
 		qcom,cdc-micbias2-headset-only;
 	};
 
+	gpio_keys {
+		compatible = "gpio-keys";
+		input-name = "gpio-keys";
+
+		vol_up {
+			label = "volume_up";
+			gpios = <&pma8084_gpios 2 0x1>;
+			linux,input-type = <1>;
+			linux,code = <115>;
+			gpio-key,wakeup;
+			debounce-interval = <15>;
+		};
+	};
+
 	gnss_qca1530: qca,qca1530@0 {
 		compatible = "qca,qca1530";
 		qca,reset-gpio = <&msmgpio 128 0>;
@@ -151,6 +165,10 @@
 	status = "disabled";
 };
 
+&xhci_hsic_host {
+   status = "disabled";
+};
+
 &ufsphy1 {
 	status = "disabled";
 };
@@ -441,7 +459,7 @@
 
 	gpio@d300 { /* GPIO 20 */
 		/* LED2 */
-		qcom,mode = <1>;		        /* Digital output */
+		qcom,mode = <1>;		/* Digital output */
 		qcom,output-type = <0>;		/* CMOS logic */
 		qcom,pull = <4>;                /* Pull down */
 		qcom,invert = <0>;		/* Do not invert the output */
@@ -488,13 +506,6 @@
 	status = "disabled";
 };
 
-&pma8084_l17 {
-	status = "ok";
-	regulator-min-microvolt = <2850000>;
-	regulator-max-microvolt = <2850000>;
-	qcom,init-voltage = <2850000>;
-};
-
 &hdmi_vreg {
 	status = "disabled";
 };
@@ -518,15 +529,16 @@
 			reg = <0xc900 0x100>;
 			status = "okay";
 			qcom,led_gpio_10 {
-				label = "mpp";
+				label = "gpio";
 				linux,name = "led:notification";
+				qcom,max-current = <40>;
+				qcom,id = <8>;
 				linux,default-trigger = "notification";
 				qcom,default-state = "on";
-				qcom,max-current = <40>;
-				qcom,id = <6>;
+				qcom,turn-off-delay-ms = <1000>;
 				qcom,source-sel = <1>;
-				qcom,mode-ctrl = <0x60>;
-				qcom,mode = "manual";
+				qcom,mode-ctrl = <0x10>;
+				qcom,vin-ctrl = <0x02>;
 			};
 		};
 	};
diff --git a/arch/arm/boot/dts/qcom/apq8084.dtsi b/arch/arm/boot/dts/qcom/apq8084.dtsi
index ae0f014..3688b2b 100644
--- a/arch/arm/boot/dts/qcom/apq8084.dtsi
+++ b/arch/arm/boot/dts/qcom/apq8084.dtsi
@@ -2791,6 +2791,7 @@
 		vdda33-supply = <&pma8084_l24>;
 		qcom,vdd-voltage-level = <0 900000 1050000>;
 		qcom,ext-vbus-id;
+		qcom,num-ports = <3>;
 		qcom,primary-phy = <&hsphy0>;
 		status = "disabled";
 	};
diff --git a/arch/arm/configs/apq8084-perf_defconfig b/arch/arm/configs/apq8084-perf_defconfig
index cc5a473..01b6253 100644
--- a/arch/arm/configs/apq8084-perf_defconfig
+++ b/arch/arm/configs/apq8084-perf_defconfig
@@ -233,6 +233,8 @@ CONFIG_RMNET_DATA_FC=y
 CONFIG_RMNET_DATA_DEBUG_PKT=y
 CONFIG_BT=y
 CONFIG_MSM_BT_POWER=y
+CONFIG_NET_VENDOR_ATHEROS=y
+CONFIG_ATL1C=m
 CONFIG_CFG80211=y
 CONFIG_CFG80211_INTERNAL_REGDB=y
 CONFIG_RFKILL=y
diff --git a/drivers/leds/leds-qpnp.c b/drivers/leds/leds-qpnp.c
index 09a1c6b..4d812e5 100644
--- a/drivers/leds/leds-qpnp.c
+++ b/drivers/leds/leds-qpnp.c
@@ -214,6 +214,26 @@
 
 #define MPP_SOURCE_DTEST1		0x08
 
+#define GPIO_MAX_LEVEL			LED_FULL
+#define LED_GPIO_MODE_CTRL(base)	(base + 0x40)
+#define LED_GPIO_VIN_CTRL(base)		(base + 0x41)
+#define LED_GPIO_EN_CTRL(base)		(base + 0x46)
+
+#define LED_GPIO_VIN_CTRL_DEFAULT	0
+#define LED_GPIO_SOURCE_SEL_DEFAULT	LED_GPIO_MODE_ENABLE
+
+#define LED_GPIO_MODE_MASK		0x3F
+#define LED_GPIO_VIN_MASK		0x0F
+#define LED_GPIO_EN_MASK		0x80
+#define LED_GPIO_SRC_MASK		0x0F
+#define LED_GPIO_MODE_CTRL_MASK		0x30
+
+#define LED_GPIO_MODE_ENABLE	0x01
+#define LED_GPIO_MODE_DISABLE	0x00
+#define LED_GPIO_MODE_OUTPUT		0x10
+#define LED_GPIO_EN_ENABLE		0x80
+#define LED_GPIO_EN_DISABLE		0x00
+
 #define KPDBL_MAX_LEVEL			LED_FULL
 #define KPDBL_ROW_SRC_SEL(base)		(base + 0x40)
 #define KPDBL_ENABLE(base)		(base + 0x46)
@@ -240,6 +260,7 @@ enum qpnp_leds {
 	QPNP_ID_RGB_BLUE,
 	QPNP_ID_LED_MPP,
 	QPNP_ID_KPDBL,
+	QPNP_ID_LED_GPIO,
 	QPNP_ID_MAX,
 };
 
@@ -314,6 +335,10 @@ static u8 kpdbl_debug_regs[] = {
 	0x40, 0x46, 0xb1, 0xb3, 0xb4, 0xe5,
 };
 
+static u8 gpio_debug_regs[] = {
+	0x40, 0x41, 0x42, 0x45, 0x46,
+};
+
 /**
  *  pwm_config_data - pwm configuration data
  *  @lut_params - lut parameters to be used by pwm driver
@@ -468,6 +493,20 @@ struct rgb_config_data {
 };
 
 /**
+ *  gpio_config_data - gpio configuration data
+ *  @source_sel - source selection
+ *  @mode_ctrl - mode control
+ *  @vin_ctrl - input control
+ *  @enable - flag indicating LED on or off
+ */
+struct gpio_config_data {
+	u8	source_sel;
+	u8	mode_ctrl;
+	u8	vin_ctrl;
+	bool	enable;
+};
+
+/**
  * struct qpnp_led_data - internal led data structure
  * @led_classdev - led class device
  * @delayed_work - delayed work for turning off the LED
@@ -496,6 +535,7 @@ struct qpnp_led_data {
 	struct kpdbl_config_data	*kpdbl_cfg;
 	struct rgb_config_data	*rgb_cfg;
 	struct mpp_config_data	*mpp_cfg;
+	struct gpio_config_data	*gpio_cfg;
 	int			max_current;
 	bool			default_on;
 	int			turn_off_delay_ms;
@@ -965,6 +1005,69 @@ err_reg_enable:
 	return rc;
 }
 
+static int qpnp_gpio_set(struct qpnp_led_data *led)
+{
+	int rc, val;
+
+	if (led->cdev.brightness) {
+		val = (led->gpio_cfg->source_sel & LED_GPIO_SRC_MASK) |
+			(led->gpio_cfg->mode_ctrl & LED_GPIO_MODE_CTRL_MASK);
+
+		rc = qpnp_led_masked_write(led,
+			 LED_GPIO_MODE_CTRL(led->base),
+			 LED_GPIO_MODE_MASK,
+			 val);
+		if (rc) {
+			dev_err(&led->spmi_dev->dev,
+					"Failed to write led mode reg\n");
+			goto err_gpio_reg_write;
+		}
+
+		rc = qpnp_led_masked_write(led,
+			 LED_GPIO_EN_CTRL(led->base),
+			 LED_GPIO_EN_MASK,
+			 LED_GPIO_EN_ENABLE);
+		if (rc) {
+			dev_err(&led->spmi_dev->dev,
+					"Failed to write led enable reg\n");
+			goto err_gpio_reg_write;
+		}
+
+		led->gpio_cfg->enable = true;
+	} else {
+		rc = qpnp_led_masked_write(led,
+				LED_GPIO_MODE_CTRL(led->base),
+				LED_GPIO_MODE_MASK,
+				LED_GPIO_MODE_DISABLE);
+		if (rc) {
+			dev_err(&led->spmi_dev->dev,
+					"Failed to write led mode reg\n");
+			goto err_gpio_reg_write;
+		}
+
+		rc = qpnp_led_masked_write(led,
+				LED_GPIO_EN_CTRL(led->base),
+				LED_GPIO_EN_MASK,
+				LED_GPIO_EN_DISABLE);
+		if (rc) {
+			dev_err(&led->spmi_dev->dev,
+					"Failed to write led enable reg\n");
+			goto err_gpio_reg_write;
+		}
+
+		led->gpio_cfg->enable = false;
+	}
+
+	qpnp_dump_regs(led, gpio_debug_regs, ARRAY_SIZE(gpio_debug_regs));
+
+	return 0;
+
+err_gpio_reg_write:
+	led->gpio_cfg->enable = false;
+
+	return rc;
+}
+
 static int qpnp_flash_regulator_operate(struct qpnp_led_data *led, bool on)
 {
 	int rc, i;
@@ -1572,6 +1675,13 @@ static void __qpnp_led_work(struct qpnp_led_data *led,
 			dev_err(&led->spmi_dev->dev,
 					"MPP set brightness failed (%d)\n", rc);
 		break;
+	case QPNP_ID_LED_GPIO:
+		rc = qpnp_gpio_set(led);
+		if (rc < 0)
+			dev_err(&led->spmi_dev->dev,
+					"GPIO set brightness failed (%d)\n",
+					rc);
+		break;
 	case QPNP_ID_KPDBL:
 		rc = qpnp_kpdbl_set(led);
 		if (rc < 0)
@@ -1617,6 +1727,9 @@ static int qpnp_led_set_max_brightness(struct qpnp_led_data *led)
 		else
 			led->cdev.max_brightness = MPP_MAX_LEVEL;
 		break;
+	case QPNP_ID_LED_GPIO:
+			led->cdev.max_brightness = led->max_current;
+		break;
 	case QPNP_ID_KPDBL:
 		led->cdev.max_brightness = KPDBL_MAX_LEVEL;
 		break;
@@ -2656,6 +2769,21 @@ static int qpnp_mpp_init(struct qpnp_led_data *led)
 	return 0;
 }
 
+static int qpnp_gpio_init(struct qpnp_led_data *led)
+{
+	int rc;
+
+	rc = qpnp_led_masked_write(led, LED_GPIO_VIN_CTRL(led->base),
+		LED_GPIO_VIN_MASK, led->gpio_cfg->vin_ctrl);
+	if (rc) {
+		dev_err(&led->spmi_dev->dev,
+			"Failed to write led vin control reg\n");
+		return rc;
+	}
+
+	return 0;
+}
+
 static int qpnp_led_initialize(struct qpnp_led_data *led)
 {
 	int rc = 0;
@@ -2688,6 +2816,12 @@ static int qpnp_led_initialize(struct qpnp_led_data *led)
 			dev_err(&led->spmi_dev->dev,
 				"MPP initialize failed(%d)\n", rc);
 		break;
+	case QPNP_ID_LED_GPIO:
+		rc = qpnp_gpio_init(led);
+		if (rc)
+			dev_err(&led->spmi_dev->dev,
+				"GPIO initialize failed(%d)\n", rc);
+		break;
 	case QPNP_ID_KPDBL:
 		rc = qpnp_kpdbl_init(led);
 		if (rc)
@@ -3398,6 +3532,46 @@ err_config_mpp:
 	return rc;
 }
 
+static int qpnp_get_config_gpio(struct qpnp_led_data *led,
+		struct device_node *node)
+{
+	int rc;
+	u32 val;
+
+	led->gpio_cfg = devm_kzalloc(&led->spmi_dev->dev,
+			sizeof(struct gpio_config_data), GFP_KERNEL);
+	if (!led->gpio_cfg) {
+		dev_err(&led->spmi_dev->dev, "Unable to allocate memory gpio struct\n");
+		return -ENOMEM;
+	}
+
+	led->gpio_cfg->source_sel = LED_GPIO_SOURCE_SEL_DEFAULT;
+	rc = of_property_read_u32(node, "qcom,source-sel", &val);
+	if (!rc)
+		led->gpio_cfg->source_sel = (u8) val;
+	else if (rc != -EINVAL)
+		goto err_config_gpio;
+
+	led->gpio_cfg->mode_ctrl = LED_GPIO_MODE_OUTPUT;
+	rc = of_property_read_u32(node, "qcom,mode-ctrl", &val);
+	if (!rc)
+		led->gpio_cfg->mode_ctrl = (u8) val;
+	else if (rc != -EINVAL)
+		goto err_config_gpio;
+
+	led->gpio_cfg->vin_ctrl = LED_GPIO_VIN_CTRL_DEFAULT;
+	rc = of_property_read_u32(node, "qcom,vin-ctrl", &val);
+	if (!rc)
+		led->gpio_cfg->vin_ctrl = (u8) val;
+	else if (rc != -EINVAL)
+		goto err_config_gpio;
+
+	return 0;
+
+err_config_gpio:
+	return rc;
+}
+
 static int qpnp_leds_probe(struct spmi_device *spmi)
 {
 	struct qpnp_led_data *led, *led_array;
@@ -3510,6 +3684,13 @@ static int qpnp_leds_probe(struct spmi_device *spmi)
 						"Unable to read mpp config data\n");
 				goto fail_id_check;
 			}
+		} else if (strcmp(led_label, "gpio") == 0) {
+			rc = qpnp_get_config_gpio(led, temp);
+			if (rc < 0) {
+				dev_err(&led->spmi_dev->dev,
+						"Unable to read gpio config data\n");
+				goto fail_id_check;
+			}
 		} else if (strncmp(led_label, "kpdbl", sizeof("kpdbl")) == 0) {
 			num_kpbl_leds_on = 0;
 			rc = qpnp_get_config_kpdbl(led, temp);
diff --git a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c b/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c
index 83ea07e..80d1ce1 100644
--- a/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c
+++ b/drivers/media/platform/msm/camera_v2/sensor/io/msm_camera_io_util.c
@@ -475,6 +475,11 @@ int msm_camera_config_single_vreg(struct device *dev,
 {
 	int rc = 0;
 	if (config) {
+		if (dev == NULL || cam_vreg == NULL || reg_ptr == NULL) {
+			pr_err("%s: get failed NULL parameter\n", __func__);
+			goto vreg_get_fail;
+		}
+
 		CDBG("%s enable %s\n", __func__, cam_vreg->reg_name);
 		*reg_ptr = regulator_get(dev, cam_vreg->reg_name);
 		if (IS_ERR(*reg_ptr)) {
diff --git a/drivers/usb/dwc3/dwc3-msm.c b/drivers/usb/dwc3/dwc3-msm.c
index 171127c..4882d2d 100644
--- a/drivers/usb/dwc3/dwc3-msm.c
+++ b/drivers/usb/dwc3/dwc3-msm.c
@@ -1534,6 +1534,7 @@ static void dwc3_resume_work(struct work_struct *w)
 		}
 		return;
 	}
+	msleep(500);
 
 	/* bail out if system resume in process, else initiate RESUME */
 	if (atomic_read(&mdwc->pm_suspended)) {
diff --git a/drivers/usb/phy/phy-msm-hsusb.c b/drivers/usb/phy/phy-msm-hsusb.c
index 4511853..ac3a68e 100644
--- a/drivers/usb/phy/phy-msm-hsusb.c
+++ b/drivers/usb/phy/phy-msm-hsusb.c
@@ -28,15 +28,20 @@ static int override_phy_init;
 module_param(override_phy_init, int, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(override_phy_init, "Override HSPHY Init Seq");
 
+
+
+#define PORT_OFFSET(i) ((i == 0) ? 0x0 : ((i == 1) ? 0x6c : 0x88))
+
 /* QSCRATCH register settings differ based on MSM core ver */
 #define MSM_CORE_VER_120		0x10020061
 
+
 /* QSCRATCH register offsets */
 #define GENERAL_CFG_REG			(0x08)
-#define HS_PHY_CTRL_REG			(0x10)
-#define PARAMETER_OVERRIDE_X_REG	(0x14)
-#define ALT_INTERRUPT_EN_REG		(0x20)
-#define HS_PHY_IRQ_STAT_REG		(0x24)
+#define HS_PHY_CTRL_REG(i)		(0x10 + PORT_OFFSET(i))
+#define PARAMETER_OVERRIDE_X_REG(i)		(0x14 + PORT_OFFSET(i))
+#define ALT_INTERRUPT_EN_REG(i)		(0x20 + PORT_OFFSET(i))
+#define HS_PHY_IRQ_STAT_REG(i)		(0x24 + PORT_OFFSET(i))
 #define HS_PHY_CTRL_COMMON_REG		(0xEC)	/* ver >= MSM_CORE_VER_120 */
 
 /* GENERAL_CFG_REG bits */
@@ -122,6 +127,7 @@ struct msm_hsphy {
 
 	/* Using external VBUS/ID notification */
 	bool			ext_vbus_id;
+	int			num_ports;
 };
 
 static int msm_hsusb_config_vdd(struct msm_hsphy *phy, int high)
@@ -265,7 +271,7 @@ static int msm_hsphy_init(struct usb_phy *uphy)
 	 * HSPHY Initialization: Enable UTMI clock and clamp enable HVINTs,
 	 * and disable RETENTION (power-on default is ENABLED)
 	 */
-	val = readl_relaxed(phy->base + HS_PHY_CTRL_REG);
+	val = readl_relaxed(phy->base + HS_PHY_CTRL_REG(0));
 	val |= (USB2_UTMI_CLK_EN | CLAMP_MPM_DPSE_DMSE_EN_N | RETENABLEN);
 
 	if (uphy->flags & ENABLE_SECONDARY_PHY) {
@@ -273,7 +279,8 @@ static int msm_hsphy_init(struct usb_phy *uphy)
 		val |= FREECLK_DIS_WHEN_SUSP;
 	}
 
-	writel_relaxed(val, phy->base + HS_PHY_CTRL_REG);
+	writel_relaxed(val, phy->base + HS_PHY_CTRL_REG(0));
+
 	usleep_range(2000, 2200);
 
 	if (uphy->flags & ENABLE_SECONDARY_PHY)
@@ -305,7 +312,7 @@ static int msm_hsphy_init(struct usb_phy *uphy)
 		phy->hsphy_init_seq = override_phy_init;
 	if (phy->hsphy_init_seq)
 		msm_usb_write_readback(phy->base,
-					PARAMETER_OVERRIDE_X_REG, 0x03FFFFFF,
+					PARAMETER_OVERRIDE_X_REG(0), 0x03FFFFFF,
 					phy->hsphy_init_seq & 0x03FFFFFF);
 
 	return 0;
@@ -316,6 +323,7 @@ static int msm_hsphy_set_suspend(struct usb_phy *uphy, int suspend)
 	struct msm_hsphy *phy = container_of(uphy, struct msm_hsphy, phy);
 	bool host = uphy->flags & PHY_HOST_MODE;
 	bool chg_connected = uphy->flags & PHY_CHARGER_CONNECTED;
+	int i;
 
 	if (!!suspend == phy->suspended) {
 		dev_dbg(uphy->dev, "%s\n", suspend ? "already suspended"
@@ -324,45 +332,52 @@ static int msm_hsphy_set_suspend(struct usb_phy *uphy, int suspend)
 	}
 
 	if (suspend) {
-		/* Clear interrupt latch register */
-		writel_relaxed(ALT_INTERRUPT_MASK,
-				phy->base + HS_PHY_IRQ_STAT_REG);
-
-		if (host) {
-			/* Enable DP and DM HV interrupts */
-			if (phy->core_ver >= MSM_CORE_VER_120)
-				msm_usb_write_readback(phy->base,
-							ALT_INTERRUPT_EN_REG,
-							LINESTATE_INTEN,
-							LINESTATE_INTEN);
-			else
-				msm_usb_write_readback(phy->base,
-							ALT_INTERRUPT_EN_REG,
+		for (i = 0; i < phy->num_ports; i++) {
+			/* Clear interrupt latch register */
+			writel_relaxed(ALT_INTERRUPT_MASK,
+				phy->base + HS_PHY_IRQ_STAT_REG(i));
+
+			if (host) {
+				/* Enable DP and DM HV interrupts */
+				if (phy->core_ver >= MSM_CORE_VER_120)
+					msm_usb_write_readback(phy->base,
+							ALT_INTERRUPT_EN_REG(i),
+							(LINESTATE_INTEN |
+							 DPINTEN | DMINTEN),
+							(LINESTATE_INTEN |
+							 DPINTEN | DMINTEN));
+				else
+					msm_usb_write_readback(phy->base,
+							ALT_INTERRUPT_EN_REG(i),
 							DPDMHV_INT_MASK,
 							DPDMHV_INT_MASK);
-			udelay(5);
-		} else {
-			/* set the following:
-			 * OTGDISABLE0=1
-			 * USB2_SUSPEND_N_SEL=1, USB2_SUSPEND_N=0
-			 */
-			msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+				udelay(5);
+			} else {
+				/* set the following:
+				* OTGDISABLE0=1
+				* USB2_SUSPEND_N_SEL=1, USB2_SUSPEND_N=0
+				*/
+				msm_usb_write_readback(phy->base,
+					HS_PHY_CTRL_REG(i),
 					(OTGDISABLE0 | USB2_SUSPEND_N_SEL |
-					 USB2_SUSPEND_N),
+					USB2_SUSPEND_N),
 					(OTGDISABLE0 | USB2_SUSPEND_N_SEL));
-			if (!chg_connected)
-				/* Enable PHY retention */
-				msm_usb_write_readback(phy->base,
-							HS_PHY_CTRL_REG,
+				if (!chg_connected)
+					/* Enable PHY retention */
+					msm_usb_write_readback(phy->base,
+							HS_PHY_CTRL_REG(i),
 							RETENABLEN, 0);
-		}
+			}
 
-		if (!phy->ext_vbus_id)
-			/* Enable PHY-based IDHV and OTGSESSVLD HV interrupts */
-			msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+			if (!phy->ext_vbus_id)
+				/* Enable PHY-based IDHV and
+				 *OTGSESSVLD HV interrupts
+				 */
+				msm_usb_write_readback(phy->base,
+					HS_PHY_CTRL_REG(i),
 					(OTGSESSVLDHV_INTEN | IDHV_INTEN),
 					(OTGSESSVLDHV_INTEN | IDHV_INTEN));
-
+		}
 		/* can turn off regulators if disconnected in device mode */
 		if (!host && !chg_connected) {
 			if (phy->ext_vbus_id)
@@ -387,34 +402,39 @@ static int msm_hsphy_set_suspend(struct usb_phy *uphy, int suspend)
 						FSEL_MASK, FSEL_DEFAULT);
 			}
 		}
-
-		if (!phy->ext_vbus_id)
-			/* Disable HV interrupts */
-			msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
-					(OTGSESSVLDHV_INTEN | IDHV_INTEN), 0);
-
-		if (host) {
-			/* Clear interrupt latch register */
-			writel_relaxed(0x0, phy->base + HS_PHY_IRQ_STAT_REG);
-			/* Disable DP and DM HV interrupt */
-			if (phy->core_ver >= MSM_CORE_VER_120)
+		for (i = 0; i < phy->num_ports; i++) {
+			if (!phy->ext_vbus_id)
+				/* Disable HV interrupts */
 				msm_usb_write_readback(phy->base,
-							ALT_INTERRUPT_EN_REG,
+					HS_PHY_CTRL_REG(i),
+					(OTGSESSVLDHV_INTEN | IDHV_INTEN),
+					0);
+			if (host) {
+				/* Clear interrupt latch register */
+				writel_relaxed(ALT_INTERRUPT_MASK,
+					phy->base + HS_PHY_IRQ_STAT_REG(i));
+				/* Disable DP and DM HV interrupt */
+				if (phy->core_ver >= MSM_CORE_VER_120)
+					msm_usb_write_readback(phy->base,
+							ALT_INTERRUPT_EN_REG(i),
 							LINESTATE_INTEN, 0);
-			else
-				msm_usb_write_readback(phy->base,
-							ALT_INTERRUPT_EN_REG,
+				else
+					msm_usb_write_readback(phy->base,
+							ALT_INTERRUPT_EN_REG(i),
 							DPDMHV_INT_MASK, 0);
-		} else {
-			/* Disable PHY retention */
-			msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
-						RETENABLEN, RETENABLEN);
-			/* Bring PHY out of suspend */
-			msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
-						(OTGDISABLE0 |
-						 USB2_SUSPEND_N_SEL |
-						 USB2_SUSPEND_N),
-						0);
+			} else {
+				/* Disable PHY retention */
+				msm_usb_write_readback(phy->base,
+							HS_PHY_CTRL_REG(i),
+							RETENABLEN, RETENABLEN);
+				/* Bring PHY out of suspend */
+				msm_usb_write_readback(phy->base,
+							HS_PHY_CTRL_REG(i),
+							(OTGDISABLE0 |
+							USB2_SUSPEND_N_SEL |
+							USB2_SUSPEND_N),
+							0);
+			}
 		}
 	}
 
@@ -439,21 +459,24 @@ static int msm_hsphy_notify_connect(struct usb_phy *uphy,
 					COMMON_VBUSVLDEXTSEL0,
 					COMMON_VBUSVLDEXTSEL0);
 	} else {
-		msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+		msm_usb_write_readback(phy->base,
+					HS_PHY_CTRL_REG(0),
 					VBUSVLDEXTSEL0, VBUSVLDEXTSEL0);
 	}
 
 	/* Enable D+ pull-up resistor */
-	msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+	msm_usb_write_readback(phy->base,
+				HS_PHY_CTRL_REG(0),
 				VBUSVLDEXT0, VBUSVLDEXT0);
 
 	/* Set OTG VBUS Valid from HSPHY to controller */
-	msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
-				UTMI_OTG_VBUS_VALID, UTMI_OTG_VBUS_VALID);
+	msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG(0),
+				UTMI_OTG_VBUS_VALID,
+				UTMI_OTG_VBUS_VALID);
 
 	/* Indicate value is driven by UTMI_OTG_VBUS_VALID bit */
 	if (phy->core_ver >= MSM_CORE_VER_120)
-		msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+		msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG(0),
 					SW_SESSVLD_SEL, SW_SESSVLD_SEL);
 
 	return 0;
@@ -471,15 +494,16 @@ static int msm_hsphy_notify_disconnect(struct usb_phy *uphy,
 		return 0;
 
 	/* Clear OTG VBUS Valid to Controller */
-	msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+	msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG(0),
 				UTMI_OTG_VBUS_VALID, 0);
 
 	/* Disable D+ pull-up resistor */
-	msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG, VBUSVLDEXT0, 0);
+	msm_usb_write_readback(phy->base,
+					HS_PHY_CTRL_REG(0), VBUSVLDEXT0, 0);
 
 	/* Indicate value is no longer driven by UTMI_OTG_VBUS_VALID bit */
 	if (phy->core_ver >= MSM_CORE_VER_120)
-		msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG,
+		msm_usb_write_readback(phy->base, HS_PHY_CTRL_REG(0),
 					SW_SESSVLD_SEL, 0);
 
 	return 0;
@@ -588,6 +612,14 @@ static int msm_hsphy_probe(struct platform_device *pdev)
 	else if (!phy->hsphy_init_seq)
 		dev_warn(dev, "hsphy init seq cannot be 0. Using POR value\n");
 
+	if (of_property_read_u32(dev->of_node, "qcom,num-ports",
+					&phy->num_ports))
+		phy->num_ports = 1;
+	else if (phy->num_ports > 3) {
+		dev_err(dev, " number of ports more that 3 is not supported\n");
+		goto disable_hs_vdd;
+	}
+
 	phy->set_pllbtune = of_property_read_bool(dev->of_node,
 						 "qcom,set-pllbtune");
 
diff --git a/drivers/video/msm/mdss/dsi_host_v2.c b/drivers/video/msm/mdss/dsi_host_v2.c
index d086179..b9904ba 100644
--- a/drivers/video/msm/mdss/dsi_host_v2.c
+++ b/drivers/video/msm/mdss/dsi_host_v2.c
@@ -50,6 +50,8 @@ struct dsi_host_v2_private {
 static struct dsi_host_v2_private *dsi_host_private;
 static int msm_dsi_clk_ctrl(struct mdss_panel_data *pdata, int enable);
 
+static bool enable_dsi2_param = true;
+
 int msm_dsi_init(void)
 {
 	if (!dsi_host_private) {
@@ -1461,6 +1463,11 @@ static int msm_dsi_probe(struct platform_device *pdev)
 	bool cmd_cfg_cont_splash = false;
 	struct resource *mdss_dsi_mres;
 
+	if (!enable_dsi2_param) {
+		pr_err("%s: DSI2 disabled by boot params\n", __func__);
+		return 0;
+	}
+
 	pr_debug("%s\n", __func__);
 
 	rc = msm_dsi_init();
@@ -1662,6 +1669,16 @@ static int __init msm_dsi_v2_driver_init(void)
 }
 module_init(msm_dsi_v2_driver_init);
 
+/* Enable disable dsi2 through fastboot params */
+static struct kernel_param_ops dsi2_param_ops = {
+	.set = param_set_bool,
+	.get = param_get_bool,
+};
+
+module_param_cb(enable, &dsi2_param_ops,
+	&enable_dsi2_param, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(enable, "Enable or Disable DSI2");
+
 static void __exit msm_dsi_v2_driver_cleanup(void)
 {
 	platform_driver_unregister(&msm_dsi_v2_driver);
diff --git a/drivers/video/msm/mdss/mdss_dsi.c b/drivers/video/msm/mdss/mdss_dsi.c
index 10171d9..a183a73 100644
--- a/drivers/video/msm/mdss/mdss_dsi.c
+++ b/drivers/video/msm/mdss/mdss_dsi.c
@@ -27,6 +27,8 @@
 #include "mdss_dsi.h"
 #include "mdss_debug.h"
 
+static bool enable_dsi_param = true;
+
 static int mdss_dsi_regulator_init(struct platform_device *pdev)
 {
 	struct mdss_dsi_ctrl_pdata *ctrl_pdata = NULL;
@@ -1074,6 +1076,11 @@ static int mdss_dsi_ctrl_probe(struct platform_device *pdev)
 	const char *ctrl_name;
 	bool cmd_cfg_cont_splash = true;
 
+	if (!enable_dsi_param) {
+		pr_err("%s: DSI disabled by boot params\n", __func__);
+		return 0;
+	}
+
 	if (!mdss_is_ready()) {
 		pr_err("%s: MDP not probed yet!\n", __func__);
 		return -EPROBE_DEFER;
@@ -1573,6 +1580,16 @@ static void __exit mdss_dsi_driver_cleanup(void)
 }
 module_exit(mdss_dsi_driver_cleanup);
 
+/* Enable disable DSI through fastboot params */
+static struct kernel_param_ops dsi_param_ops = {
+	.set = param_set_bool,
+	.get = param_get_bool,
+};
+
+module_param_cb(enable, &dsi_param_ops,
+	&enable_dsi_param, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(enable, "Enable or Disable DSI");
+
 MODULE_LICENSE("GPL v2");
 MODULE_DESCRIPTION("DSI controller driver");
 MODULE_AUTHOR("Chandan Uddaraju <chandanu@codeaurora.org>");
diff --git a/drivers/video/msm/mdss/mdss_edp.c b/drivers/video/msm/mdss/mdss_edp.c
index 8e1ebef..fd67de1 100644
--- a/drivers/video/msm/mdss/mdss_edp.c
+++ b/drivers/video/msm/mdss/mdss_edp.c
@@ -40,6 +40,8 @@
 #define VDDA_UA_ON_LOAD		100000	/* uA units */
 #define VDDA_UA_OFF_LOAD	100		/* uA units */
 
+static bool enable_edp_param = true;
+
 static int mdss_edp_regulator_on(struct mdss_edp_drv_pdata *edp_drv);
 /*
  * Init regulator needed for edp, 8974_l12
@@ -1041,6 +1043,11 @@ static int mdss_edp_probe(struct platform_device *pdev)
 	struct mdss_edp_drv_pdata *edp_drv;
 	struct mdss_panel_cfg *pan_cfg = NULL;
 
+	if (!enable_edp_param) {
+		pr_err("%s: EDP disabled by boot params\n", __func__);
+		return 0;
+	}
+
 	if (!mdss_is_ready()) {
 		pr_err("%s: MDP not probed yet!\n", __func__);
 		return -EPROBE_DEFER;
@@ -1199,5 +1206,15 @@ static void __exit mdss_edp_driver_cleanup(void)
 }
 module_exit(mdss_edp_driver_cleanup);
 
+/* Enable disable EDP through fastboot params */
+static struct kernel_param_ops edp_param_ops = {
+	.set = param_set_bool,
+	.get = param_get_bool,
+};
+
+module_param_cb(enable, &edp_param_ops,
+	&enable_edp_param, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(enable, "Enable or Disable EDP");
+
 MODULE_LICENSE("GPL v2");
 MODULE_DESCRIPTION("eDP controller driver");
diff --git a/drivers/video/msm/mdss/mdss_hdmi_tx.c b/drivers/video/msm/mdss/mdss_hdmi_tx.c
index 86fd3ce..0bf8aef 100644
--- a/drivers/video/msm/mdss/mdss_hdmi_tx.c
+++ b/drivers/video/msm/mdss/mdss_hdmi_tx.c
@@ -63,6 +63,12 @@
 /* Enable HDCP by default */
 static bool hdcp_feature_on = true;
 
+/* HDMI as primary panel feature */
+static bool hdmi_primary_feature_on;
+
+/* hdmi resolution for hdmi primary feature */
+static int hdmi_resolution_id = HDMI_VFRMT_1920x1080p60_16_9;
+
 /* Supported HDMI Audio channels */
 #define MSM_HDMI_AUDIO_CHANNEL_2	2
 #define MSM_HDMI_AUDIO_CHANNEL_3	3
@@ -3318,9 +3324,8 @@ static int hdmi_tx_register_panel(struct hdmi_tx_ctrl *hdmi_ctrl)
 
 	hdmi_ctrl->panel_data.event_handler = hdmi_tx_panel_event_handler;
 
-	/* Default 1080p resolution for hdmi primary display */
 	if (hdmi_ctrl->pdata.primary)
-		hdmi_ctrl->video_resolution = DEFAULT_HDMI_PRIMARY_RESOLUTION;
+		hdmi_ctrl->video_resolution = hdmi_resolution_id;
 	else
 		hdmi_ctrl->video_resolution = DEFAULT_VIDEO_RESOLUTION;
 
@@ -3923,6 +3928,11 @@ static int hdmi_tx_probe(struct platform_device *pdev)
 		goto failed_dt_data;
 	}
 
+	if (hdmi_primary_feature_on) {
+		DEV_DBG("%s: HDMI is primary\n", __func__);
+		hdmi_ctrl->pdata.primary = true;
+	}
+
 	rc = hdmi_tx_init_resource(hdmi_ctrl);
 	if (rc) {
 		DEV_ERR("%s: FAILED: resource init. rc=%d\n",
@@ -4038,6 +4048,26 @@ module_param_cb(hdcp, &hdcp_feature_on_param_ops, &hdcp_feature_on,
 	S_IRUGO | S_IWUSR);
 MODULE_PARM_DESC(hdcp, "Enable or Disable HDCP");
 
+/* HDMI as primary feature */
+static struct kernel_param_ops hdmi_primary_feature_ops = {
+	.set = param_set_bool,
+	.get = param_get_bool,
+};
+
+module_param_cb(primary, &hdmi_primary_feature_ops,
+	&hdmi_primary_feature_on, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(primary, "Make HDMI as primary or external");
+
+/* HDMI resolution selection */
+static struct kernel_param_ops hdmi_resolution_feature_ops = {
+	.set = param_set_int,
+	.get = param_get_int,
+};
+
+module_param_cb(resolution, &hdmi_resolution_feature_ops,
+	&hdmi_resolution_id, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(resolution, "Select HDMI primary resolution");
+
 module_init(hdmi_tx_drv_init);
 module_exit(hdmi_tx_drv_exit);
 
diff --git a/drivers/video/msm/mdss/mdss_wb.c b/drivers/video/msm/mdss/mdss_wb.c
index a169302..65e2f7a 100644
--- a/drivers/video/msm/mdss/mdss_wb.c
+++ b/drivers/video/msm/mdss/mdss_wb.c
@@ -1,4 +1,4 @@
-/* Copyright (c) 2011-2013, The Linux Foundation. All rights reserved.
+/* Copyright (c) 2011-2014, The Linux Foundation. All rights reserved.
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 and
@@ -22,10 +22,13 @@
 #include <linux/spinlock.h>
 #include <linux/types.h>
 #include <linux/version.h>
+#include <linux/moduleparam.h>
 
 #include "mdss_panel.h"
 #include "mdss_wb.h"
 
+static bool enable_wb_param = true;
+
 /**
  * mdss_wb_check_params - check new panel info params
  * @pdata: current panel information
@@ -123,6 +126,11 @@ static int mdss_wb_probe(struct platform_device *pdev)
 	struct mdss_wb_ctrl *wb_ctrl = NULL;
 	int rc = 0;
 
+	if (!enable_wb_param) {
+		pr_err("WB disabled by fastboot params\n");
+		return 0;
+	}
+
 	if (!pdev->dev.of_node)
 		return -ENODEV;
 
@@ -194,5 +202,14 @@ static int __init mdss_wb_driver_init(void)
 	rc = platform_driver_register(&mdss_wb_driver);
 	return rc;
 }
-
 module_init(mdss_wb_driver_init);
+
+/* Enable disable WB through fastboot params */
+static struct kernel_param_ops dsi_param_ops = {
+	.set = param_set_bool,
+	.get = param_get_bool,
+};
+
+module_param_cb(enable, &dsi_param_ops,
+	&enable_wb_param, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(enable, "Enable or Disable WB");
-- 
1.7.9.5

